{"version":3,"file":"assets.js","sourceRoot":"","sources":["assets.ts"],"names":[],"mappings":"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","sourcesContent":["import { getWebOutputPath, readConfigJsonAsync } from '@expo/config';\nimport { sharpAsync } from '@expo/image-utils';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport { ensureDirSync, move, readFileSync, statSync, unlinkSync } from 'fs-extra';\nimport glob from 'glob';\nimport { basename, join, parse, relative } from 'path';\nimport prettyBytes from 'pretty-bytes';\nimport temporary from 'tempy';\n\nexport type AssetOptimizationState = { [hash: string]: boolean };\n\nfunction fileExists(file: string): boolean {\n  try {\n    return statSync(file).isFile();\n  } catch (_) {\n    return false;\n  }\n}\n\n// Read the contents of assets.json under .expo-shared folder. Create the file/directory if they don't exist.\nasync function readAssetJsonAsync(\n  projectDir: string\n): Promise<{ assetJson: JsonFile<AssetOptimizationState>; assetInfo: AssetOptimizationState }> {\n  const dirPath = join(projectDir, '.expo-shared');\n\n  ensureDirSync(dirPath);\n\n  const assetJson = new JsonFile<AssetOptimizationState>(join(dirPath, 'assets.json'));\n  if (!fileExists(assetJson.file)) {\n    console.log();\n    console.log(\n      chalk.magenta(\n        `\\u203A Creating ${chalk.bold('.expo-shared/assets.json')} in the project's root directory.`\n      )\n    );\n    console.log(\n      chalk.magenta`\\u203A This file is autogenerated and should not be edited directly.`\n    );\n    console.log(\n      chalk.magenta`\\u203A You should commit this to git so that asset state is shared between collaborators.`\n    );\n    console.log();\n\n    await assetJson.writeAsync({});\n  }\n  const assetInfo = await assetJson.readAsync();\n  return { assetJson, assetInfo };\n}\n\n// Compress an inputted jpg or png\nasync function optimizeImageAsync(\n  projectRoot: string,\n  inputPath: string,\n  quality: number\n): Promise<string> {\n  console.log(`\\u203A Checking ${chalk.reset.bold(relative(projectRoot, inputPath))}`);\n  const outputPath = temporary.directory();\n  await sharpAsync({\n    input: inputPath,\n    output: outputPath,\n    quality,\n    // https://sharp.pixelplumbing.com/en/stable/api-output/#parameters_4\n    adaptiveFiltering: true,\n  });\n  return join(outputPath, basename(inputPath));\n}\n\n// Add .orig extension to a filename in a path string\nfunction createNewFilename(imagePath: string): string {\n  const { dir, name, ext } = parse(imagePath);\n  return join(dir, `${name}.orig${ext}`);\n}\n\n// Find all project assets under assetBundlePatterns in app.json excluding node_modules.\n// If --include of --exclude flags were passed in those results are filtered out.\nasync function getAssetFilesAsync(\n  projectDir: string,\n  options: OptimizationOptions\n): Promise<{ allFiles: string[]; selectedFiles: string[] }> {\n  const { exp } = await readConfigJsonAsync(projectDir, true, true);\n  const webOutputPath = await getWebOutputPath(exp);\n  const { assetBundlePatterns } = exp;\n  const globOptions = {\n    cwd: projectDir,\n    ignore: ['**/node_modules/**', '**/ios/**', '**/android/**', `**/${webOutputPath}/**`],\n  };\n\n  // All files must be returned even if flags are passed in to properly update assets.json\n  const allFiles: string[] = [];\n  const patterns = assetBundlePatterns || ['**/*'];\n  patterns.forEach((pattern: string) => {\n    allFiles.push(...glob.sync(pattern, globOptions));\n  });\n  // If --include is passed in, only return files matching that pattern\n  const included =\n    options && options.include ? [...glob.sync(options.include, globOptions)] : allFiles;\n  const toExclude = new Set();\n  if (options && options.exclude) {\n    glob.sync(options.exclude, globOptions).forEach(file => toExclude.add(file));\n  }\n  // If --exclude is passed in, filter out files matching that pattern\n  const excluded = included.filter(file => !toExclude.has(file));\n  const filtered = options && options.exclude ? excluded : included;\n  return {\n    allFiles: filterImages(allFiles, projectDir),\n    selectedFiles: filterImages(filtered, projectDir),\n  };\n}\n\n// Formats an array of files to include the project directory and filters out PNGs and JPGs.\nfunction filterImages(files: string[], projectDir: string) {\n  const regex = /\\.(png|jpg|jpeg)$/;\n  const withDirectory = files.map(file => `${projectDir}/${file}`.replace('//', '/'));\n  const allImages = withDirectory.filter(file => regex.test(file.toLowerCase()));\n  return allImages;\n}\n\n// Calculate SHA256 Checksum value of a file based on its contents\nfunction calculateHash(filePath: string): string {\n  const contents = readFileSync(filePath);\n  return crypto\n    .createHash('sha256')\n    .update(contents)\n    .digest('hex');\n}\n\nexport type OptimizationOptions = {\n  quality?: number;\n  include?: string;\n  exclude?: string;\n  save?: boolean;\n};\n\n// Returns a boolean indicating whether or not there are assets to optimize\nexport async function isProjectOptimized(\n  projectDir: string,\n  options: OptimizationOptions\n): Promise<boolean> {\n  if (!fileExists(join(projectDir, '.expo-shared/assets.json'))) {\n    return false;\n  }\n  const { selectedFiles } = await getAssetFilesAsync(projectDir, options);\n  const { assetInfo } = await readAssetJsonAsync(projectDir);\n\n  for (const file of selectedFiles) {\n    const hash = calculateHash(file);\n    if (!assetInfo[hash]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function optimizeAsync(\n  projectRoot: string = './',\n  options: OptimizationOptions = {}\n): Promise<void> {\n  console.log();\n  console.log(chalk.bold`\\u203A Optimizing assets...`);\n\n  const { assetJson, assetInfo } = await readAssetJsonAsync(projectRoot);\n  // Keep track of which hash values in assets.json are no longer in use\n  const outdated = new Set<string>();\n  for (const fileHash in assetInfo) outdated.add(fileHash);\n\n  let totalSaved = 0;\n  const { allFiles, selectedFiles } = await getAssetFilesAsync(projectRoot, options);\n  const hashes: { [filePath: string]: string } = {};\n  // Remove assets that have been deleted/modified from assets.json\n  allFiles.forEach(filePath => {\n    const hash = calculateHash(filePath);\n    if (assetInfo[hash]) {\n      outdated.delete(hash);\n    }\n    hashes[filePath] = hash;\n  });\n  outdated.forEach(outdatedHash => {\n    delete assetInfo[outdatedHash];\n  });\n\n  const { include, exclude, save } = options;\n  const quality = options.quality == null ? 80 : options.quality;\n\n  const images = include || exclude ? selectedFiles : allFiles;\n  for (const image of images) {\n    const hash = hashes[image];\n    if (assetInfo[hash]) {\n      continue;\n    }\n    const { size: prevSize } = statSync(image);\n\n    const newName = createNewFilename(image);\n    const optimizedImage = await optimizeImageAsync(projectRoot, image, quality);\n\n    const { size: newSize } = statSync(optimizedImage);\n    const amountSaved = prevSize - newSize;\n    if (amountSaved > 0) {\n      await move(image, newName);\n      await move(optimizedImage, image);\n    } else {\n      assetInfo[hash] = true;\n      console.log(\n        chalk.dim(\n          amountSaved === 0\n            ? ` \\u203A Skipping: Original was identical in size.`\n            : ` \\u203A Skipping: Original was ${prettyBytes(amountSaved * -1)} smaller.`\n        )\n      );\n      continue;\n    }\n    // Recalculate hash since the image has changed\n    const newHash = calculateHash(image);\n    assetInfo[newHash] = true;\n\n    if (save) {\n      if (hash === newHash) {\n        console.log(\n          chalk.gray(\n            `\\u203A Compressed asset ${image} is identical to the original. Using original instead.`\n          )\n        );\n        unlinkSync(newName);\n      } else {\n        console.log(chalk.gray(`\\u203A Saving original asset to ${newName}`));\n        // Save the old hash to prevent reoptimizing\n        assetInfo[hash] = true;\n      }\n    } else {\n      // Delete the renamed original asset\n      unlinkSync(newName);\n    }\n    if (amountSaved) {\n      totalSaved += amountSaved;\n      console.log(chalk.magenta(`\\u203A Saved ${prettyBytes(amountSaved)}`));\n    } else {\n      console.log(chalk.gray(`\\u203A Nothing to compress.`));\n    }\n  }\n  console.log();\n  if (totalSaved === 0) {\n    console.log(chalk.yellow`\\u203A All assets were fully optimized already.`);\n  } else {\n    console.log(\n      chalk.bold(\n        `\\u203A Finished compressing assets. ${chalk.green(prettyBytes(totalSaved))} saved.`\n      )\n    );\n  }\n  assetJson.writeAsync(assetInfo);\n}\n"]}
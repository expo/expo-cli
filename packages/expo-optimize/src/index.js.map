{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport { resolve } from 'path';\n\nimport { isProjectOptimized as isProjectOptimizedAsync, optimizeAsync } from './assets';\nimport shouldUpdate from './update';\n\nlet projectDirectory: string = '';\n\nconst packageJson = () => require('../package.json');\n\nconst program = new Command(packageJson().name)\n  .version(packageJson().version)\n  .arguments('<project-directory>')\n  .usage(`${chalk.green('<project-directory>')} [options]`)\n  .description('Compress the assets in your Expo project')\n  // TODO: (verbose option): log the include, exclude options\n  .option('-s, --save', 'Save the original assets with a .orig extension')\n  .option(\n    '-q, --quality [number]',\n    'Specify the quality the compressed image is reduced to. Default is 80'\n  )\n  .option(\n    '-i, --include [pattern]',\n    'Include only assets that match this glob pattern relative to the project root'\n  )\n  .option(\n    '-e, --exclude [pattern]',\n    'Exclude all assets that match this glob pattern relative to the project root'\n  )\n  .action((inputProjectDirectory: string) => (projectDirectory = inputProjectDirectory))\n  .allowUnknownOption()\n  .parse(process.argv);\n\nasync function run() {\n  // Space out first line\n  console.log();\n\n  if (typeof projectDirectory === 'string') {\n    projectDirectory = projectDirectory.trim();\n  }\n\n  const resolvedProjectRoot = resolve(projectDirectory);\n\n  const optimizationOptions = {\n    save: program.save,\n    include: program.include,\n    exclude: program.exclude,\n    quality: parseQuality(),\n  };\n\n  const isProjectOptimized = await isProjectOptimizedAsync(\n    resolvedProjectRoot,\n    optimizationOptions\n  );\n  if (!program.save && !isProjectOptimized) {\n    console.warn(chalk.bgYellow.black('This will overwrite the original assets.'));\n  }\n  await optimizeAsync(resolvedProjectRoot, optimizationOptions);\n}\n\nfunction parseQuality(): number | undefined {\n  //   const defaultQuality = 80;\n  if (program.quality == null) {\n    return undefined;\n  }\n  const quality = Number(program.quality);\n  if (!(Number.isInteger(quality) && quality > 0 && quality <= 100)) {\n    throw new Error('Invalid value for --quality flag. Must be an integer between 1 and 100.');\n  }\n  return quality;\n}\n\nrun()\n  .then(shouldUpdate)\n  .catch(async reason => {\n    console.log();\n    console.log('Aborting run');\n    if (reason.command) {\n      console.log(`  ${chalk.magenta(reason.command)} has failed.`);\n    } else {\n      console.log(chalk.red`An unexpected error was encountered. Please report it as a bug:`);\n      console.log(reason);\n    }\n    console.log();\n\n    await shouldUpdate();\n\n    process.exit(1);\n  });\n"]}
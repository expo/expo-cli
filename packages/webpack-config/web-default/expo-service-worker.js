/* global self */

/**
 * Store notification icon string in service worker.
 * Ref: https://stackoverflow.com/a/35729334/2603230
 */
self.addEventListener('message', event => {
  let data = JSON.parse(event.data);

  self.notificationIcon = data.notificationIcon;
});

/**
 * Add support for push notification.
 */
self.addEventListener('push', event => {
  let payload = {};
  try {
    payload = event.data.json();
  } catch (e) {
    // If `event.data.text()` is not a JSON object, we just treat it
    // as a plain string and display it as the body.
    payload = { title: '', body: event.data.text() };
  }

  const title = payload.title;
  let options = {
    body: payload.body,
    data: payload.data || {},
    icon: payload.data._icon || self.notificationIcon || null,
  };
  if (payload.data._tag) {
    options.tag = payload.data._tag;
    options.renotify = payload.data._renotify;
  }
  if (payload.data._richContent && payload.data._richContent.image) {
    options.image = payload.data._richContent.image;
  }
  event.waitUntil(self.registration.showNotification(title, options));
});

// https://developer.mozilla.org/en-US/docs/Web/API/Clients
self.addEventListener('notificationclick', event => {
  event.notification.close();

  event.waitUntil(
    (async () => {
      const allClients = await self.clients.matchAll({
        includeUncontrolled: true,
      });

      let appClient;

      let path = event.notification.data._webPath || '/';

      // Let's see if we already have a window open:
      for (const client of allClients) {
        const url = new URL(client.url);

        if (url.pathname === path) {
          // Excellent, let's use it!
          client.focus();
          appClient = client;
          break;
        }
      }

      // If we didn't find an existing window,
      // open a new one:
      if (!appClient) {
        appClient = await self.clients.openWindow(path);
      }

      // Message the client:
      // `origin` will always be `'selected'` in this case.
      // https://docs.expo.io/versions/latest/sdk/notifications/#notification
      appClient.postMessage({
        origin: 'selected',
        data: event.notification.data,
        remote: !event.notification._isLocal,
      });
    })()
  );
});

// Import the script generated by workbox.
self.importScripts('service-worker.js');

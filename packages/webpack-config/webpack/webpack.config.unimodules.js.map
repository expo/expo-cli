{"version":3,"file":"webpack.config.unimodules.js","sourceRoot":"","sources":["../src/webpack.config.unimodules.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;AAEH,yCAA0D;AAE1D,sFAAqD;AACrD,uCAA6C;AAC7C,aAAa;AAEb,wFAAgE;AAEhE,2CAIwB;AACxB,8DAAsC;AACtC,0EAAkD;AAElD,kFAA0D;AAC1D,8FAAsE;AACtE,4EAAoD;AAEpD,iDAAiD;AACjD,mBAA8B,GAAgB,EAAE,IAAe;;QAC7D,MAAM;QACJ;;;;;;WAMG;QACH,KAAK,EAAE,SAAS,EAChB,UAAU,GAAG,GAAG;QAChB;;;WAGG;QACH,UAAU;QACV;;;;;;;WAOG;QACH,mBAAmB,GAAG,IAAI,GAC3B,GAAG,IAAI,CAAC;QAET,MAAM,MAAM,GAAG,UAAU,IAAI,CAAC,MAAM,wBAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM,KAAK,GAAG,qCAA4B,CAAC,SAAS,EAAE,sBAAa,EAAE,IAAI,CAAC,CAAC;QAE3E,MAAM,SAAS,GAAG,MAAM,uBAAa,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,IAAI,GAAG,iBAAO,CAAC,GAAG,CAAC,CAAC;QAE1B,MAAM,WAAW,GAAG,MAAM,gCAAsB,CAAC;YAC/C,IAAI;YACJ,gBAAgB,EAAE,SAAS,CAAC,IAAI;SACjC,CAAC,CAAC;QAEH,MAAM,iBAAiB,GAAG,mCAA0B,CAAC,MAAM,EAAE,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE5F,MAAM,oBAAoB,GAAG,iCAAuB,CAAC,IAAI,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC;QAE1F,2EAA2E;QAC3E,sFAAsF;QACtF,qFAAqF;QACrF,MAAM,SAAS,GAAG,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvE,MAAM,OAAO,GAAG;YACd;gBACE,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE,CAAC,aAAa,CAAC;gBACpB,OAAO,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM;aACnC;YACD,qCAAqC;YACrC,WAAW;SACZ,CAAC;QAEF,IAAI,mBAAmB,EAAE;YACvB,MAAM,uBAAuB,GAAG,0BAAgB,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;YAChE,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;SACvC;QAED,OAAO;YACL,qGAAqG;YACrG,IAAI;YACJ,qCAAqC;YACrC,MAAM,EAAE;gBACN,2CAA2C;gBAC3C,6BAA6B;gBAC7B,UAAU;aACX;YACD,OAAO,EAAE;gBACP,2EAA2E;gBAC3E,0EAA0E;gBAC1E,gCAAgC;gBAChC,IAAI,iCAAc,CAAC;oBACjB,QAAQ,EAAE,qBAAqB;oBAC/B,UAAU;iBACX,CAAC;gBACF,IAAI,0BAAgB,CAAC;oBACnB,IAAI;oBACJ,SAAS;oBACT,MAAM;oBACN,sBAAsB,EAAE,SAAS,CAAC,UAAU,CAAC,QAAQ;iBACtD,CAAC;aACH;YACD,MAAM,EAAE;gBACN,oBAAoB,EAAE,KAAK;gBAE3B,KAAK,EAAE,OAAO;aACf;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,KAAK;gBACL,UAAU,EAAE,gCAAuB,CAAC,KAAK,CAAC;aAC3C;SACF,CAAC;IACJ,CAAC;CAAA;AAjGD,4BAiGC","sourcesContent":["/**\n * A bare webpack config that is required for using\n * react-native-web & Unimodules in the browser.\n *\n * This should be used to inject basic support into systems\n * like react-scripts and storybook.\n */\n\nimport { createEnvironmentConstants } from '@expo/config';\nimport webpack from 'webpack';\nimport ManifestPlugin from 'webpack-manifest-plugin';\nimport { ExpoDefinePlugin } from './plugins';\n// @ts-ignore\n\nimport createClientEnvironment from './createClientEnvironment';\nimport { Arguments, Environment } from './types';\nimport {\n  DEFAULT_ALIAS,\n  getModuleFileExtensions,\n  overrideWithPropertyOrConfig,\n} from './utils/config';\nimport getMode from './utils/getMode';\nimport getPathsAsync from './utils/getPathsAsync';\n\nimport createFontLoader from './loaders/createFontLoader';\nimport createBabelLoaderAsync from './loaders/createBabelLoaderAsync';\nimport getConfigAsync from './utils/getConfigAsync';\n\n// { production, development, mode, projectRoot }\nexport default async function(env: Environment, argv: Arguments): Promise<webpack.Configuration> {\n  const {\n    /**\n     * **Dangerously** disable, extend, or clobber the default alias.\n     *\n     * Disable by passing in `alias: false`\n     * Clobber with `alias: { ... }` setting existing `DEFAULT_ALIAS` values to `undefined`\n     * Extend by defining new values in `alias: { ... }`\n     */\n    alias: aliasProp,\n    publicPath = '/',\n    /**\n     * The project's `app.json`\n     * This will be used to populate the `Constants.manifest` in the Unimodule `expo-constants`\n     */\n    expoConfig,\n    /**\n     * **Dangerously** disable the default font loading configuration.\n     * If you are merging `webpack.config.unimodules` with another less flexible config,\n     * you may want to disable font loading in favor of a manually defined loader.\n     *\n     * If you do this, be sure to include `@expo/vector-icons` & `react-native-vector-icons`\n     * otherwise icons won't work as expected.\n     */\n    supportsFontLoading = true,\n  } = argv;\n\n  const config = expoConfig || (await getConfigAsync(env));\n  const alias = overrideWithPropertyOrConfig(aliasProp, DEFAULT_ALIAS, true);\n\n  const locations = await getPathsAsync(env);\n  const mode = getMode(env);\n\n  const babelConfig = await createBabelLoaderAsync({\n    mode,\n    babelProjectRoot: locations.root,\n  });\n\n  const publicAppManifest = createEnvironmentConstants(config, locations.production.manifest);\n\n  const environmentVariables = createClientEnvironment(mode, publicPath, publicAppManifest);\n\n  // `publicUrl` is just like `publicPath`, but we will provide it to our app\n  // as %WEB_PUBLIC_URL% in `index.html` and `process.env.WEB_PUBLIC_URL` in JavaScript.\n  // Omit trailing slash as %WEB_PUBLIC_URL%/xyz looks better than %WEB_PUBLIC_URL%xyz.\n  const publicUrl = mode === 'production' ? publicPath.slice(0, -1) : '';\n\n  const loaders = [\n    {\n      test: /\\.html$/,\n      use: ['html-loader'],\n      exclude: locations.template.folder,\n    },\n    // Process application JS with Babel.\n    babelConfig,\n  ];\n\n  if (supportsFontLoading) {\n    const fontLoaderConfiguration = createFontLoader({ locations });\n    loaders.push(fontLoaderConfiguration);\n  }\n\n  return {\n    // TODO: Bacon: It would be good not to define mode here. We currently need to for the env variables.\n    mode,\n    // configures where the build ends up\n    output: {\n      // This is the URL that app is served from.\n      // We use \"/\" in development.\n      publicPath,\n    },\n    plugins: [\n      // Generate a manifest file which contains a mapping of all asset filenames\n      // to their corresponding output file so that tools can pick it up without\n      // having to parse `index.html`.\n      new ManifestPlugin({\n        fileName: 'asset-manifest.json',\n        publicPath,\n      }),\n      new ExpoDefinePlugin({\n        mode,\n        publicUrl,\n        config,\n        productionManifestPath: locations.production.manifest,\n      }),\n    ],\n    module: {\n      strictExportPresence: false,\n\n      rules: loaders,\n    },\n    resolve: {\n      symlinks: false,\n      alias,\n      extensions: getModuleFileExtensions('web'),\n    },\n  };\n}\n"]}
{"version":3,"file":"createDevServerConfigAsync.js","sourceRoot":"","sources":["../src/createDevServerConfigAsync.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,oGAA4E;AAC5E,aAAa;AACb,sGAA8E;AAC9E,8GAAsF;AAItF,0EAAkD;AAElD,aAAa;AACb,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,SAAS,CAAC;AAE3C,SAA8B,0BAA0B,CACtD,GAAgB,EAChB,IAAe;;QAEf,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACpC,MAAM,EAAE,KAAK,GAAG,KAAK,EAAE,GAAG,GAAG,CAAC;QAC9B,MAAM,SAAS,GAAG,MAAM,uBAAa,CAAC,GAAG,CAAC,CAAC;QAC3C,oHAAoH;QACpH,OAAO;YACL,8CAA8C;YAC9C,QAAQ,EAAE,IAAI;YACd,0EAA0E;YAC1E,oEAAoE;YACpE,cAAc,EAAE,MAAM;YACtB,0JAA0J;YAC1J,2EAA2E;YAC3E,4EAA4E;YAC5E,4EAA4E;YAC5E,0EAA0E;YAC1E,wEAAwE;YACxE,2EAA2E;YAC3E,2EAA2E;YAC3E,6EAA6E;YAC7E,iEAAiE;YACjE,2EAA2E;YAC3E,wEAAwE;YACxE,wEAAwE;YACxE,4EAA4E;YAC5E,yEAAyE;YACzE,WAAW,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM;YACtC,sEAAsE;YACtE,gBAAgB,EAAE,IAAI;YACtB,sEAAsE;YACtE,sEAAsE;YACtE,qEAAqE;YACrE,mEAAmE;YACnE,0EAA0E;YAC1E,GAAG,EAAE,IAAI;YACT,uEAAuE;YACvE,yEAAyE;YACzE,UAAU,EAAE,GAAG;YACf,yEAAyE;YACzE,kFAAkF;YAClF,KAAK,EAAE,IAAI;YAEX,IAAI;YACJ,OAAO,EAAE,KAAK;YACd,kBAAkB,EAAE;gBAClB,yDAAyD;gBACzD,+DAA+D;gBAC/D,cAAc,EAAE,IAAI;aACrB;YACD,MAAM,EAAE,WAAW;YACnB,KAAK;YAEL,MAAM,CAAC,GAAG,EAAE,MAAM;gBAChB,yCAAyC;gBACzC,iEAAiE;gBACjE,oCAAoC;gBACpC,IAAI;gBAEJ,wEAAwE;gBACxE,GAAG,CAAC,GAAG,CAAC,iCAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzC,0DAA0D;gBAC1D,GAAG,CAAC,GAAG,CAAC,gCAAsB,EAAE,CAAC,CAAC;gBAElC,wEAAwE;gBACxE,yEAAyE;gBACzE,qEAAqE;gBACrE,kCAAkC;gBAClC,2FAA2F;gBAC3F,GAAG,CAAC,GAAG,CAAC,qCAA2B,EAAE,CAAC,CAAC;YACzC,CAAC;YAED,qLAAqL;YAErL,kEAAkE;YAClE,+BAA+B;YAE/B,KAAK;YACL,gBAAgB,EAAE,CAAC,KAAK;YACxB,qCAAqC;YACrC,OAAO,EAAE;gBACP,6BAA6B,EAAE,GAAG;gBAClC,8BAA8B,EAAE,wCAAwC;gBACxE,8BAA8B,EAAE,+CAA+C;aAChF;SACF,CAAC;IACJ,CAAC;CAAA;AAxFD,6CAwFC","sourcesContent":["import errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware';\n// @ts-ignore\nimport evalSourceMapMiddleware from 'react-dev-utils/evalSourceMapMiddleware';\nimport noopServiceWorkerMiddleware from 'react-dev-utils/noopServiceWorkerMiddleware';\nimport { Configuration as WebpackDevServerConfiguration } from 'webpack-dev-server';\n\nimport { Arguments, Environment } from './types';\nimport getPathsAsync from './utils/getPathsAsync';\n\n// @ts-ignore\nconst host = process.env.HOST || '0.0.0.0';\n\nexport default async function createDevServerConfigAsync(\n  env: Environment,\n  argv: Arguments\n): Promise<WebpackDevServerConfiguration> {\n  const { allowedHost, proxy } = argv;\n  const { https = false } = env;\n  const locations = await getPathsAsync(env);\n  // https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpackDevServer.config.js\n  return {\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'none',\n    // https://github.com/facebook/create-react-app/blob/e59e0920f3bef0c2ac47bbf6b4ff3092c8ff08fb/packages/react-scripts/config/webpackDevServer.config.js#L46\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files wonâ€™t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %WEB_PUBLIC_URL%:\n    // <link rel=\"shortcut icon\" href=\"%WEB_PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.WEB_PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through Webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: locations.template.folder,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide /sockjs-node/ endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the Webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // It is important to tell WebpackDevServer to use the same \"root\" path\n    // as we specified in the config. In development, we always serve from /.\n    publicPath: '/',\n    // WebpackDevServer is noisy by default so we emit custom message instead\n    // by listening to the compiler events with `compiler.hooks[...].tap` calls above.\n    quiet: true,\n\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n    },\n    public: allowedHost,\n    proxy,\n\n    before(app, server) {\n      // if (fs.existsSync(paths.proxySetup)) {\n      //   // This registers user provided middleware for proxy reasons\n      //   require(paths.proxySetup)(app);\n      // }\n\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server));\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebookincubator/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware());\n    },\n\n    // We don't use watchOptions: https://github.com/facebook/create-react-app/blob/e59e0920f3bef0c2ac47bbf6b4ff3092c8ff08fb/packages/react-scripts/config/webpackDevServer.config.js#L79\n\n    // Enable HTTPS if the HTTPS environment variable is set to 'true'\n    // https: protocol === 'https',\n\n    https,\n    disableHostCheck: !proxy,\n    // allowedHosts: [host, 'localhost'],\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',\n      'Access-Control-Allow-Headers': 'X-Requested-With, content-type, Authorization',\n    },\n  };\n}\n"]}
{"version":3,"file":"createClientEnvironment.js","sourceRoot":"","sources":["../src/createClientEnvironment.ts"],"names":[],"mappings":";;AAWA,SAAS,uBAAuB,CAC9B,IAAU,EACV,UAAkB,EAClB,iBAA6B;IAE7B,MAAM,WAAW,GAAG,IAAI,IAAI,aAAa,CAAC;IAC1C,MAAM,OAAO,GAAG,WAAW,KAAK,YAAY,CAAC;IAE7C,MAAM,aAAa,GAAG,6BAA6B,CAAC;IAEpD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;SACxC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACtC,MAAM,CACL,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACX,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC;IACb,CAAC,EACD;QACE;;;WAGG;QACH,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;QAErC;;;;;WAKG;QACH,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;QAEtC;;;WAGG;QACH,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC;KACnB,CAC/B,CAAC;IACJ,OAAO;QACL,aAAa,EAAE,UAAU;QACzB,OAAO;KACR,CAAC;AACJ,CAAC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["/**\n * This creates environment variables that won't be tree shaken.\n */\nimport { ExpoConfig } from '@expo/config';\nimport { Mode } from './types';\n\nexport interface ClientEnv {\n  __DEV__: boolean;\n  'process.env': { [key: string]: string };\n}\n\nfunction createClientEnvironment(\n  mode: Mode,\n  publicPath: string,\n  nativeAppManifest: ExpoConfig\n): ClientEnv {\n  const environment = mode || 'development';\n  const __DEV__ = environment !== 'production';\n\n  const ENV_VAR_REGEX = /^(EXPO_|REACT_NATIVE_|CI$)/i;\n\n  const processEnv = Object.keys(process.env)\n    .filter(key => ENV_VAR_REGEX.test(key))\n    .reduce(\n      (env, key) => {\n        env[key] = JSON.stringify(process.env[key]);\n        return env;\n      },\n      {\n        /**\n         * Useful for determining whether weâ€™re running in production mode.\n         * Most importantly, it switches React into the correct mode.\n         */\n        NODE_ENV: JSON.stringify(environment),\n\n        /**\n         * Useful for resolving the correct path to static assets in `public`.\n         * For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n         * This should only be used as an escape hatch. Normally you would put\n         * images into the root folder and `import` them in code to get their paths.\n         */\n        PUBLIC_URL: JSON.stringify(publicPath),\n\n        /**\n         * Surfaces the `app.json` (config) as an environment variable which is then parsed by\n         * `expo-constants` https://docs.expo.io/versions/latest/sdk/constants/\n         */\n        APP_MANIFEST: JSON.stringify(nativeAppManifest),\n      } as { [key: string]: string }\n    );\n  return {\n    'process.env': processEnv,\n    __DEV__,\n  };\n}\n\nexport default createClientEnvironment;\n"]}
{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/utils/config.ts"],"names":[],"mappings":";;AAAa,QAAA,aAAa,GAAG;IAC3B,wDAAwD;IACxD,eAAe,EAAE,kBAAkB;IACnC,iCAAiC,EAAE,uCAAuC;IAC1E,kEAAkE;IAClE,wBAAwB;IACxB,mDAAmD,EAAE,sCAAsC;IAC3F,8CAA8C,EAAE,uCAAuC;IACvF,kDAAkD,EAAE,qCAAqC;IACzF,0DAA0D;IAC1D,4DAA4D,EAC1D,uDAAuD;IACzD,4DAA4D,EAC1D,oFAAoF;IACtF,qDAAqD,EACnD,gEAAgE;IAClE,gEAAgE,EAC9D,2EAA2E;IAC7E,yDAAyD,EACvD,8DAA8D;CACjE,CAAC;AAEF,SAAgB,uBAAuB,CAAC,GAAG,SAAmB;IAC5D,IAAI,cAAc,GAAG,EAAE,CAAC;IAExB,yCAAyC;IACzC,KAAK,MAAM,SAAS,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE;QAClD,4DAA4D;QAC5D,KAAK,MAAM,QAAQ,IAAI,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;YACzC,cAAc,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACtE;KACF;IACD,uBAAuB;IACvB,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,2CAA2C;IAC3C,OAAO,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;AAClD,CAAC;AAdD,0DAcC;AAED,SAAS,QAAQ,CAAC,GAAQ;IACxB,IAAI,GAAG,KAAK,IAAI,EAAE;QAChB,OAAO,KAAK,CAAC;KACd;IACD,OAAO,OAAO,GAAG,KAAK,UAAU,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;AAC9D,CAAC;AAED;;;;;GAKG;AAEH,SAAgB,0BAA0B,CACxC,IAAS,EACT,MAAwC,EACxC,QAAiB,KAAK;IAEtB,gDAAgD;IAChD,IAAI,IAAI,EAAE;QACR,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE;YAC3B,IAAI,MAAM,IAAI,IAAI,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gBAChD,MAAM,IAAI,KAAK,CAAC,kDAAkD,GAAG,MAAM,CAAC,CAAC;aAC9E;YACD,yBACK,MAAM,EACN,IAAI,EACP;SACH;QACD,4BAA4B;QAC5B,OAAO,MAAM,CAAC;KACf;IACD,uCAAuC;IACvC,OAAO,IAAI,CAAC;AACd,CAAC;AArBD,gEAqBC;AAED;;GAEG;AACH,SAAgB,4BAA4B,CAC1C,IAAS,EACT,MAAwC,EACxC,QAAiB,KAAK;IAEtB,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,MAAM,CAAC;KACf;IACD,OAAO,0BAA0B,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AACzD,CAAC;AATD,oEASC","sourcesContent":["export const DEFAULT_ALIAS = {\n  // Alias direct react-native imports to react-native-web\n  'react-native$': 'react-native-web',\n  '@react-native-community/netinfo': 'react-native-web/dist/exports/NetInfo',\n  // Add polyfills for modules that react-native-web doesn't support\n  // Depends on expo-asset\n  'react-native/Libraries/Image/AssetSourceResolver$': 'expo-asset/build/AssetSourceResolver',\n  'react-native/Libraries/Image/assetPathUtils$': 'expo-asset/build/Image/assetPathUtils',\n  'react-native/Libraries/Image/resolveAssetSource$': 'expo-asset/build/resolveAssetSource',\n  // Alias internal react-native modules to react-native-web\n  'react-native/Libraries/Components/View/ViewStylePropTypes$':\n    'react-native-web/dist/exports/View/ViewStylePropTypes',\n  'react-native/Libraries/EventEmitter/RCTDeviceEventEmitter$':\n    'react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter',\n  'react-native/Libraries/vendor/emitter/EventEmitter$':\n    'react-native-web/dist/vendor/react-native/emitter/EventEmitter',\n  'react-native/Libraries/vendor/emitter/EventSubscriptionVendor$':\n    'react-native-web/dist/vendor/react-native/emitter/EventSubscriptionVendor',\n  'react-native/Libraries/EventEmitter/NativeEventEmitter$':\n    'react-native-web/dist/vendor/react-native/NativeEventEmitter',\n};\n\nexport function getModuleFileExtensions(...platforms: string[]): string[] {\n  let fileExtensions = [];\n\n  // Support both TypeScript and JavaScript\n  for (const extension of ['ts', 'tsx', 'js', 'jsx']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      fileExtensions.push([platform, extension].filter(Boolean).join('.'));\n    }\n  }\n  // Always add this last\n  fileExtensions.push('json');\n  // Webpack requires a `.` before each value\n  return fileExtensions.map(value => `.${value}`);\n}\n\nfunction isObject(val: any): boolean {\n  if (val === null) {\n    return false;\n  }\n  return typeof val === 'function' || typeof val === 'object';\n}\n\n/**\n * Given a config option that could evalutate to true, config, or null; return a config.\n * e.g.\n * `polyfill: true` returns the `config`\n * `polyfill: {}` returns `{}`\n */\n\nexport function enableWithPropertyOrConfig(\n  prop: any,\n  config: boolean | { [key: string]: any },\n  merge: boolean = false\n): any {\n  // Value is truthy but not a replacement config.\n  if (prop) {\n    if (isObject(prop) && merge) {\n      if (config == null || typeof config !== 'object') {\n        throw new Error('enableWithPropertyOrConfig cannot merge config: ' + config);\n      }\n      return {\n        ...config,\n        ...prop,\n      };\n    }\n    // Return the default config\n    return config;\n  }\n  // Return falsey or replacement config.\n  return prop;\n}\n\n/**\n * Used for features that are enabled by default unless specified otherwise.\n */\nexport function overrideWithPropertyOrConfig(\n  prop: any,\n  config: boolean | { [key: string]: any },\n  merge: boolean = false\n): any {\n  if (prop === undefined) {\n    return config;\n  }\n  return enableWithPropertyOrConfig(prop, config, merge);\n}\n"]}
{"version":3,"file":"getPathsAsync-test.js","sourceRoot":"","sources":["../../../src/utils/__tests__/getPathsAsync-test.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,gDAAwB;AACxB,qEAA6C;AAC7C,uEAA+C;AAE/C,MAAM,WAAW,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;AACpE,MAAM,yBAAyB,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,gCAAgC,CAAC,CAAC;AAE5F,SAAS,gBAAgB,CAAC,SAAS;IACjC,OAAO,wBAAc,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,GAAG,EAAG,CAAC,CAAC;AAC5F,CAAC;AAED,UAAU,CAAC,GAAG,EAAE;IACd,OAAO,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;AACpC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,yBAAyB,EAAE,GAAS,EAAE;IACvC,MAAM,SAAS,GAAG,MAAM,uBAAa,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;IAEvD,MAAM,UAAU,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAC/C,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;IAErC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzC,CAAC,CAAA,CAAC,CAAC;AAEH,EAAE,CAAC,yFAAyF,EAAE,GAAS,EAAE;IACvG,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,wBAAwB,CAAC;IACtD,MAAM,SAAS,GAAG,MAAM,uBAAa,CAAC,EAAE,WAAW,EAAE,yBAAyB,EAAE,CAAC,CAAC;IAClF,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAC/D,CAAC,CAAA,CAAC,CAAC;AAEH,EAAE,CAAC,+EAA+E,EAAE,GAAS,EAAE;IAC7F,MAAM,SAAS,GAAG,MAAM,uBAAa,CAAC,EAAE,WAAW,EAAE,yBAAyB,EAAE,CAAC,CAAC;IAClF,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;AACjD,CAAC,CAAA,CAAC,CAAC;AACH,kDAAkD;AAClD,gDAAgD","sourcesContent":["import path from 'path';\nimport getPathsAsync from '../getPathsAsync';\nimport normalizePaths from '../normalizePaths';\n\nconst projectRoot = path.resolve(__dirname, '../../../tests/basic');\nconst projectRootCustomHomepage = path.resolve(__dirname, '../../../tests/custom-homepage');\n\nfunction defaultNormalize(locations) {\n  return normalizePaths(locations, value => value.split('packages/webpack-config/').pop()!);\n}\n\nbeforeEach(() => {\n  delete process.env.WEB_PUBLIC_URL;\n});\n\nit(`has consistent defaults`, async () => {\n  const locations = await getPathsAsync({ projectRoot });\n\n  const normalized = defaultNormalize(locations);\n  expect(normalized).toMatchSnapshot();\n\n  expect(locations.servedPath).toBe('/');\n});\n\nit(`uses a custom public path from WEB_PUBLIC_URL over the homepage field from package.json`, async () => {\n  process.env.WEB_PUBLIC_URL = 'WEB_PUBLIC_URL-defined';\n  const locations = await getPathsAsync({ projectRoot: projectRootCustomHomepage });\n  expect(locations.servedPath).toBe('WEB_PUBLIC_URL-defined/');\n});\n\nit(`uses a custom public path from the homepage field of a project's package.json`, async () => {\n  const locations = await getPathsAsync({ projectRoot: projectRootCustomHomepage });\n  expect(locations.servedPath).toMatchSnapshot();\n});\n// TODO: Bacon: Add test for resolving entry point\n// TODO: Bacon: Add test for custom config paths\n"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/validators/types.ts"],"names":[],"mappings":";;AAAA,qEAA0D;AA+D1D,gCAAM,CAkBJ,IAAI,CAAC,CAAC","sourcesContent":["import { assert, IsExact } from 'conditional-type-checks';\n\n/**\n * Convert the given type into JSON-friendly equivalent that have the same structure,\n * but for any key the value can either be string | number | boolean.\n */\nexport type JsonShape<T> = IsNever<\n  T,\n  never,\n  | SNB\n  | (T extends any[]\n      ? JsonShape<T[number]>[]\n      : T extends object\n      ? { [P in keyof T]+?: JsonShape<T[P]> }\n      : never)\n>;\n\n/**\n * Like Required but recursive for object properties\n */\nexport type DeepRequired<T> = T extends Primitive\n  ? NonNullable<T>\n  : T extends object\n  ? { [K in keyof T]-?: DeepRequired<T[K]> }\n  : NonNullable<T>;\n\n/**\n * The very same as keyof, but does not count in keys of primitives and arrays (e.g. will not return String.toUpperCase)\n */\nexport type NonPrimitiveAndNonArrayKeys<T> = T extends SNB | any[] ? never : keyof T;\n\n/**\n * @see https://github.com/microsoft/TypeScript/issues/23182\n */\nexport type IsNever<T, Positive, Negative> = [T] extends [never] ? Positive : Negative;\n\nexport type OptionalPromise<T> = Promise<T> | T;\ntype SNB = string | number | boolean;\ntype Primitive = SNB | bigint | symbol | null | undefined;\n\n// -------------------- //\n// type testing section //\n// -------------------- //\n\ntype _TestType = {\n  n: number;\n  s?: string;\n  b?: boolean;\n  a_n: number[];\n  t_s: [string, string];\n  o: {\n    n?: number;\n  };\n\n  o_n?: {\n    o: {\n      s: string;\n    };\n  };\n};\n\ntype _TestTypeJSON = JsonShape<_TestType>;\n\nassert<\n  IsExact<\n    _TestTypeJSON,\n    | SNB\n    | Partial<{\n        n: SNB;\n        s: SNB;\n        b: SNB;\n        a_n: SNB | SNB[];\n        t_s: SNB | SNB[];\n        o: SNB | Partial<{ n: SNB }>;\n        o_n:\n          | SNB\n          | Partial<{\n              o: SNB | Partial<{ s?: SNB }>;\n            }>;\n      }>\n  >\n>(true);\n"]}
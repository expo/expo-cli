{"version":3,"file":"MainActivity.js","sourceRoot":"","sources":["../../src/android/MainActivity.ts"],"names":[],"mappings":"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","sourcesContent":["import { projectConfig } from '@react-native-community/cli-platform-android';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { SplashScreenImageResizeMode, SplashScreenImageResizeModeType } from '../constants';\nimport StateManager from '../utils/StateManager';\nimport { insert, replace } from '../utils/string-utils';\n\n/**\n * Injects specific code to MainActivity that would trigger SplashScreen mounting process.\n */\nexport default async function configureMainActivity(\n  projectRootPath: string,\n  config: {\n    imageResizeMode?: SplashScreenImageResizeModeType;\n    statusBar?: {\n      translucent?: boolean;\n    };\n  } = {}\n) {\n  const resizeMode = config.imageResizeMode ?? SplashScreenImageResizeMode.CONTAIN;\n  const statusBarTranslucent: boolean = config.statusBar?.translucent ?? false;\n\n  // eslint-disable-next-line\n  const mainApplicationPath = projectConfig(projectRootPath)?.mainFilePath;\n\n  if (!mainApplicationPath) {\n    throw new Error(`Failed to configure 'MainActivity'.`);\n  }\n\n  const mainActivityPathJava = path.resolve(mainApplicationPath, '../MainActivity.java');\n  const mainActivityPathKotlin = path.resolve(mainApplicationPath, '../MainActivity.kt');\n\n  const isJava = await fs.pathExists(mainActivityPathJava);\n  const isKotlin = !isJava && (await fs.pathExists(mainActivityPathKotlin));\n\n  if (!isJava && !isKotlin) {\n    throw new Error(`Failed to find 'MainActivity' file.`);\n  }\n\n  const LE = isJava ? ';' : '';\n  const fileContent = await fs.readFile(\n    isJava ? mainActivityPathJava : mainActivityPathKotlin,\n    'utf-8'\n  );\n  const { state: newFileContent } = new StateManager<string, boolean>(fileContent)\n    // importing ReactRootView\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /^import com\\.facebook\\.react\\.ReactRootView.*?$/m,\n        replaceContent: `import com.facebook.react.ReactRootView${LE}`,\n      });\n      return [newContent, 'replacedReactRootViewImports', succeeded];\n    })\n    .applyAction((content, { replacedReactRootViewImports }) => {\n      if (replacedReactRootViewImports) {\n        return [content, 'insertedReactRootViewImports', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: isJava ? /(?=public class .* extends .* {.*$)/m : /(?=class .* : .* {.*$)/m,\n        insertContent: `import com.facebook.react.ReactRootView${LE}\n\n`,\n      });\n\n      return [newContent, 'insertedReactRootViewImports', succeeded];\n    })\n    // importing SplashScreen\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /^import expo\\.modules\\.splashscreen\\..*?SplashScreen.*?\\nimport expo\\.modules\\.splashscreen\\.SplashScreenImageResizeMode.*?$/m,\n        replaceContent: `import expo.modules.splashscreen.singletons.SplashScreen${LE}\nimport expo.modules.splashscreen.SplashScreenImageResizeMode${LE}`,\n      });\n      return [newContent, 'replacedSplashImports', succeeded];\n    })\n    .applyAction((content, { replacedSplashImports }) => {\n      if (replacedSplashImports) {\n        return [content, 'insertedSplashImports', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: isJava ? /(?=public class .* extends .* {.*$)/m : /(?=class .* : .* {.*$)/m,\n        insertContent: `import expo.modules.splashscreen.singletons.SplashScreen${LE}\nimport expo.modules.splashscreen.SplashScreenImageResizeMode${LE}\n\n`,\n      });\n      return [newContent, 'insertedSplashImports', succeeded];\n    })\n    // registering SplashScreen in onCreate()\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenImageResizeMode\\..*\\).*$/m,\n        replaceContent: `SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n          isKotlin ? '::class.java' : '.class'\n        }, ${statusBarTranslucent})${LE}`,\n      });\n      return [newContent, 'replacedInOnCreate', succeeded];\n    })\n    .applyAction((content, { replacedInOnCreate }) => {\n      if (replacedInOnCreate) {\n        return [content, 'insertedInOnCreate', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: /(?<=^.*super\\.onCreate.*$)/m, // insert just below super.onCreate\n        insertContent: `\n    // SplashScreen.show(...) has to be called after super.onCreate(...)\n    // Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n          isKotlin ? '::class.java' : '.class'\n        }, ${statusBarTranslucent})${LE}`,\n      });\n      return [newContent, 'insertedInOnCreate', succeeded];\n    })\n    // inserting basic onCreate()\n    .applyAction((content, { replacedInOnCreate, insertedInOnCreate }) => {\n      if (replacedInOnCreate || insertedInOnCreate) {\n        return [content, 'insertedOnCreate', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: isJava\n          ? /(?<=public class .* extends .* {.*$)/m\n          : /(?<=class .* : .* {.*$)/m,\n        insertContent: `\n  ${\n    isJava\n      ? `@Override\n  protected void onCreate(Bundle savedInstanceState`\n      : 'override fun onCreate(savedInstanceState: Bundle?'\n  }) {\n    super.onCreate(savedInstanceState)${LE}\n    // SplashScreen.show(...) has to be called after super.onCreate(...)\n    // Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n          isKotlin ? '::class.java' : '.class'\n        }, ${statusBarTranslucent})${LE}\n  }\n`,\n      });\n      return [newContent, 'insertedOnCreate', succeeded];\n    })\n    // importing Bundle\n    .applyAction((content, { replacedInOnCreate, insertedInOnCreate }) => {\n      if (replacedInOnCreate || insertedInOnCreate) {\n        return [content, 'replacedBundleImport', false];\n      }\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /import android\\.os\\.Bundle/m,\n        replaceContent: 'import android.os.Bundle',\n      });\n      return [newContent, 'replacedBundleImport', succeeded];\n    })\n    .applyAction((content, { replacedInOnCreate, insertedInOnCreate }) => {\n      if (replacedInOnCreate || insertedInOnCreate) {\n        return [content, 'insertedBundleImport', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: /(?<=(^.*?package .*?$))/m,\n        insertContent: `\\n\\nimport android.os.Bundle${LE}`,\n      });\n      return [newContent, 'insertedBundleImport', succeeded];\n    });\n\n  await fs.writeFile(isJava ? mainActivityPathJava : mainActivityPathKotlin, newFileContent);\n}\n"]}